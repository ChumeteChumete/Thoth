package main

import (
    "context"
    "crypto/tls"
    "fmt"
    "net"
    "net/http"
    "os"
    "os/signal"
    "syscall"
    "time"
    "log"
    "github.com/joho/godotenv"

    "Thoth/internal/handlers"
    "Thoth/internal/websocket"
    "Thoth/internal/storage"
)

func main() {
    log.SetFlags(log.LstdFlags | log.Lshortfile)
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env
    if err := godotenv.Load(); err != nil {
        log.Println("‚ö†Ô∏è  –§–∞–π–ª .env –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –±—É–¥—É—Ç –≤–∑—è—Ç—ã –∏–∑ —Å–∏—Å—Ç–µ–º—ã")
    }

    // –î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    log.Println("üöÄ –ó–∞–ø—É—Å–∫ Thoth Chat Server")
    log.Printf("üìÅ –†–∞–±–æ—á–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: %s", getCurrentDir())
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã
    if !checkCertificates() {
        log.Println("‚ö†Ô∏è  SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –∏–ª–∏ –Ω–µ–≤–∞–ª–∏–¥–Ω—ã")
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    connStr := os.Getenv("THOTH_DB_CONN")
    if connStr == "" {
        log.Fatal("‚ùå –ù–µ –∑–∞–¥–∞–Ω–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è THOTH_DB_CONN")
    }
    
    store, err := storage.NewStorage(connStr)
    if err != nil {
        log.Fatalf("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ: %v", err)
    }
    defer store.Close()
    log.Println("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")

    // –°–æ–∑–¥–∞–µ–º Hub - —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π –¥–∏—Å–ø–µ—Ç—á–µ—Ä —á–∞—Ç–∞
    hub := websocket.NewHub()
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º Hub –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–π –≥–æ—Ä—É—Ç–∏–Ω–µ
    go hub.Run()
    log.Println("‚úÖ WebSocket Hub –∑–∞–ø—É—â–µ–Ω")
    
    // –°–æ–∑–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ HTTP –∑–∞–ø—Ä–æ—Å–æ–≤
    chatHandler := handlers.NewChatHandler(hub, store)
    
    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –º–∞—Ä—à—Ä—É—Ç—ã
    http.HandleFunc("/", serveHome)
    http.HandleFunc("/ws", chatHandler.ServeWS)
    http.HandleFunc("/health", healthCheck)
    http.Handle("/static/", http.StripPrefix("/static/", http.FileServer(http.Dir("web/static/"))))
    
    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Å–µ—Ä–≤–µ—Ä
    srv := &http.Server{
        Addr:         "0.0.0.0:8443",
        ReadTimeout:  30 * time.Second,
        WriteTimeout: 30 * time.Second,
        IdleTimeout:  120 * time.Second,
    }

    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º TLS
    tlsConfig, err := setupTLS()
    if err != nil {
        log.Fatalf("‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ TLS: %v", err)
    }
    srv.TLSConfig = tlsConfig

    // –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Å–µ—Ç–∏
    diagnoseNetwork()

    // –ó–∞–ø—É—Å–∫–∞–µ–º HTTP —Å–µ—Ä–≤–µ—Ä
    go func() {
        log.Println("üåê –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ https://localhost:8443")
        log.Println("üåê –í–Ω–µ—à–Ω–∏–π –¥–æ—Å—Ç—É–ø: https://thoth-webrtc.duckdns.org:8443")
        log.Println("üìä Health check: https://localhost:8443/health")
        
        if err := srv.ListenAndServeTLS("certs/server.crt", "certs/server.key"); err != nil && err != http.ErrServerClosed {
            log.Fatalf("‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ HTTPS —Å–µ—Ä–≤–µ—Ä–∞: %v", err)
        }
    }()

    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π HTTP —Å–µ—Ä–≤–µ—Ä –¥–ª—è —Ä–µ–¥–∏—Ä–µ–∫—Ç–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    go func() {
        httpSrv := &http.Server{
            Addr: ":8080",
            Handler: http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
                target := "https://" + r.Host + ":8443" + r.URL.Path
                if len(r.URL.RawQuery) > 0 {
                    target += "?" + r.URL.RawQuery
                }
                log.Printf("üîÑ –†–µ–¥–∏—Ä–µ–∫—Ç HTTP -> HTTPS: %s", target)
                http.Redirect(w, r, target, http.StatusPermanentRedirect)
            }),
        }
        
        log.Println("üîÑ HTTP —Ä–µ–¥–∏—Ä–µ–∫—Ç —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ :8080")
        if err := httpSrv.ListenAndServe(); err != nil && err != http.ErrServerClosed {
            log.Printf("‚ö†Ô∏è  HTTP —Ä–µ–¥–∏—Ä–µ–∫—Ç —Å–µ—Ä–≤–µ—Ä: %v", err)
        }
    }()

    // Graceful shutdown
    ctx, stop := signal.NotifyContext(context.Background(), syscall.SIGINT, syscall.SIGTERM)
    defer stop()

    <-ctx.Done()
    log.Println("üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è")

    shutdownCtx, cancel := context.WithTimeout(context.Background(), 5*time.Second)
    defer cancel()

    if err := srv.Shutdown(shutdownCtx); err != nil {
        log.Fatalf("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Å–µ—Ä–≤–µ—Ä–∞: %v", err)
    }

    hub.Stop()
    log.Println("‚úÖ –°–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
}

func getCurrentDir() string {
    dir, err := os.Getwd()
    if err != nil {
        return "unknown"
    }
    return dir
}

func checkCertificates() bool {
    certFile := "certs/server.crt"
    keyFile := "certs/server.key"
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤
    if _, err := os.Stat(certFile); os.IsNotExist(err) {
        log.Printf("‚ùå –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω: %s", certFile)
        return false
    }
    
    if _, err := os.Stat(keyFile); os.IsNotExist(err) {
        log.Printf("‚ùå –ö–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω: %s", keyFile)
        return false
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞
    _, err := tls.LoadX509KeyPair(certFile, keyFile)
    if err != nil {
        log.Printf("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞: %v", err)
        return false
    }
    
    log.Println("‚úÖ SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã –Ω–∞–π–¥–µ–Ω—ã –∏ –≤–∞–ª–∏–¥–Ω—ã")
    return true
}

func setupTLS() (*tls.Config, error) {
    cert, err := tls.LoadX509KeyPair("certs/server.crt", "certs/server.key")
    if err != nil {
        return nil, fmt.Errorf("–æ—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞: %v", err)
    }
    
    config := &tls.Config{
        Certificates: []tls.Certificate{cert},
        ServerName:   "thoth-webrtc.duckdns.org",
        MinVersion:   tls.VersionTLS12,
        CipherSuites: []uint16{
            tls.TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,
            tls.TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,
            tls.TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,
        },
    }
    
    log.Println("‚úÖ TLS –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞")
    return config, nil
}

func diagnoseNetwork() {
    // –ü–æ–ª—É—á–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ IP –∞–¥—Ä–µ—Å–∞
    addrs, err := net.InterfaceAddrs()
    if err != nil {
        log.Printf("‚ö†Ô∏è  –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–µ—Ç–µ–≤—ã—Ö –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤: %v", err)
        return
    }
    
    log.Println("üåê –°–µ—Ç–µ–≤—ã–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã:")
    for _, addr := range addrs {
        if ipnet, ok := addr.(*net.IPNet); ok && !ipnet.IP.IsLoopback() {
            if ipnet.IP.To4() != nil {
                log.Printf("   üìç %s", ipnet.IP)
            }
        }
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –ø–æ—Ä—Ç–∞
    listener, err := net.Listen("tcp", ":8443")
    if err != nil {
        log.Printf("‚ùå –ü–æ—Ä—Ç 8443 –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: %v", err)
    } else {
        listener.Close()
        log.Println("‚úÖ –ü–æ—Ä—Ç 8443 –¥–æ—Å—Ç—É–ø–µ–Ω")
    }
}

func healthCheck(w http.ResponseWriter, r *http.Request) {
    status := map[string]string{
        "status":    "ok",
        "timestamp": time.Now().Format(time.RFC3339),
        "version":   "1.0.0",
        "service":   "thoth-chat",
    }
    
    w.Header().Set("Content-Type", "application/json")
    w.WriteHeader(http.StatusOK)
    
    response := fmt.Sprintf(`{
        "status": "%s",
        "timestamp": "%s",
        "version": "%s",
        "service": "%s"
    }`, status["status"], status["timestamp"], status["version"], status["service"])
    
    w.Write([]byte(response))
    
    log.Printf("ü©∫ Health check from %s", r.RemoteAddr)
}

// serveHome –æ—Ç–¥–∞–µ—Ç –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
func serveHome(w http.ResponseWriter, r *http.Request) {
    if r.URL.Path != "/" {
        log.Printf("‚ùå 404: %s", r.URL.Path)
        http.Error(w, "–°—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", http.StatusNotFound)
        return
    }
    
    if r.Method != "GET" {
        log.Printf("‚ùå Method not allowed: %s", r.Method)
        http.Error(w, "–ú–µ—Ç–æ–¥ –Ω–µ —Ä–∞–∑—Ä–µ—à–µ–Ω", http.StatusMethodNotAllowed)
        return
    }
    
    log.Printf("üìÑ –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–ø—Ä–æ—à–µ–Ω–∞ –æ—Ç %s", r.RemoteAddr)
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
    filePath := "web/static/index.html"
    if _, err := os.Stat(filePath); os.IsNotExist(err) {
        log.Printf("‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: %s", filePath)
        http.Error(w, "–§–∞–π–ª index.html –Ω–µ –Ω–∞–π–¥–µ–Ω", http.StatusNotFound)
        return
    }
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
    w.Header().Set("X-Frame-Options", "DENY")
    w.Header().Set("X-Content-Type-Options", "nosniff")
    w.Header().Set("X-XSS-Protection", "1; mode=block")
    
    // –û—Ç–¥–∞–µ–º index.html
    http.ServeFile(w, r, filePath)
}