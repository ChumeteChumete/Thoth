class ThothChatClient {
    constructor() {
        this.ws = null;
        this.username = '';
        this.room = '';
        this.isConnected = false;
        this.localStream = null;
        this.peerConnections = new Map(); // username -> RTCPeerConnection
        this.onlineUsers = new Set();
        this.broadcastingUsers = new Set(); // –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å –≤–∫–ª—é—á–µ–Ω–Ω—ã–º –≤–∏–¥–µ–æ
        
        // WebRTC –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
        this.rtcConfig = {
            iceServers: [
                { urls: 'stun:stun.l.google.com:19302' },
                { urls: 'stun:stun1.l.google.com:19302' }
            ]
        };
        
        this.initElements();
        this.bindEvents();
    }
    
    initElements() {
        this.messagesContainer = document.getElementById('messages');
        this.messageInput = document.getElementById('messageInput');
        this.sendBtn = document.getElementById('sendBtn');
        this.connectBtn = document.getElementById('connectBtn');
        this.usernameInput = document.getElementById('usernameInput');
        this.roomInput = document.getElementById('roomInput');
        this.connectionOverlay = document.getElementById('connectionOverlay');
        this.usernameDisplay = document.getElementById('username-display');
        this.roomDisplay = document.getElementById('room-display');
        this.usersContainer = document.getElementById('users-container');
        this.usersCount = document.getElementById('users-count');
        this.videoToggle = document.getElementById('videoToggle');
        this.audioToggle = document.getElementById('audioToggle');
        this.videoArea = document.getElementById('videoArea');
        this.localVideo = document.getElementById('localVideo');
    }
    
    bindEvents() {
        this.connectBtn.addEventListener('click', () => this.connect());
        this.sendBtn.addEventListener('click', () => this.sendMessage());
        this.messageInput.addEventListener('keypress', (e) => {
            if (e.key === 'Enter') this.sendMessage();
        });
        this.videoToggle.addEventListener('click', () => this.toggleVideo());
        this.audioToggle.addEventListener('click', () => this.toggleAudio());
    }
    
    connect() {
        this.connectBtn.classList.add('connecting');
        this.connectBtn.textContent = '–ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è...';
        this.connectBtn.disabled = true;
        
        if (this.isConnected || (this.ws && this.ws.readyState === WebSocket.CONNECTING)) {
            this.resetConnectButton();
            return;
        }
        
        if (this.ws) {
            this.ws.close();
        }
        
        this.username = this.usernameInput.value.trim() || '–ê–Ω–æ–Ω–∏–º';
        this.room = this.roomInput.value.trim() || 'general';
        
        const wsUrl = `wss://192.168.0.101:8443/ws?username=${encodeURIComponent(this.username)}&room=${encodeURIComponent(this.room)}`;
        
        try {
            this.ws = new WebSocket(wsUrl);
            
            this.ws.onopen = () => {
                console.log('‚úÖ WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
                this.onConnected();
            };
            
            this.ws.onmessage = (event) => {
                const data = JSON.parse(event.data);
                this.handleMessage(data);
            };
            
            this.ws.onclose = (event) => {
                console.log('‚ùå WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ:', event.code, event.reason);
                this.onDisconnected();
            };
            
            this.ws.onerror = (error) => {
                console.error('‚ùå WebSocket –æ—à–∏–±–∫–∞:', error);
                this.onDisconnected();
            };
            
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:', error);
            alert('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É');
            this.resetConnectButton();
        }
    }
    
    resetConnectButton() {
        this.connectBtn.classList.remove('connecting');
        this.connectBtn.textContent = '–ü–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è';
        this.connectBtn.disabled = false;
    }
    
    onConnected() {
        this.isConnected = true;
        this.connectionOverlay.classList.add('hidden');
        this.messageInput.disabled = false;
        this.sendBtn.disabled = false;
        this.usernameDisplay.textContent = this.username;
        this.roomDisplay.textContent = this.room;
        
        this.addSystemMessage(`–ü–æ–¥–∫–ª—é—á–∏–ª–∏—Å—å –∫ –∫–æ–º–Ω–∞—Ç–µ "${this.room}"`);
        this.addUser(this.username);
        this.resetConnectButton();
    }
    
    onDisconnected() {
        this.isConnected = false;
        this.ws = null;
        this.messageInput.disabled = true;
        this.sendBtn.disabled = true;
        
        this.addSystemMessage('–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –ø–æ—Ç–µ—Ä—è–Ω–æ');
        this.onlineUsers.clear();
        this.broadcastingUsers.clear();
        this.updateUsersList();
        this.resetConnectButton();
        
        // –ó–∞–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ WebRTC —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        this.peerConnections.forEach((pc, username) => {
            console.log('üîå –ó–∞–∫—Ä—ã–≤–∞–µ–º WebRTC —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å', username);
            pc.close();
        });
        this.peerConnections.clear();
    }
    
    handleMessage(data) {
        console.log('üì® –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ:', data);
        
        if (data.type === 'chat') {
            this.displayMessage(data);
        } else if (data.type === 'user_joined') {
            this.addUser(data.username);
            this.addSystemMessage(`${data.username} –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ —á–∞—Ç—É`);
            
            // –ï—Å–ª–∏ —É –Ω–∞—Å –µ—Å—Ç—å –≤–∏–¥–µ–æ, —Å—Ä–∞–∑—É –∏–Ω–∏—Ü–∏–∏—Ä—É–µ–º –∑–≤–æ–Ω–æ–∫ –Ω–æ–≤–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            if (this.localStream && data.username !== this.username) {
                setTimeout(() => {
                    console.log('üé• –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–≤–æ–Ω–∏–º –Ω–æ–≤–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é:', data.username);
                    this.startVideoCall(data.username);
                }, 2000); // –£–≤–µ–ª–∏—á–∏–ª–∏ –∑–∞–¥–µ—Ä–∂–∫—É –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
            }
            
        } else if (data.type === 'user_left') {
            this.removeUser(data.username);
            this.addSystemMessage(`${data.username} –ø–æ–∫–∏–Ω—É–ª —á–∞—Ç`);
            this.closePeerConnection(data.username);
        } else if (data.type === 'users_list') {
            try {
                const users = JSON.parse(data.content);
                this.onlineUsers.clear();
                users.forEach(username => this.onlineUsers.add(username));
                this.updateUsersList();
                
                // –ï—Å–ª–∏ —É –Ω–∞—Å –µ—Å—Ç—å –≤–∏–¥–µ–æ, –∑–≤–æ–Ω–∏–º –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
                if (this.localStream) {
                    users.forEach(username => {
                        if (username !== this.username && !this.peerConnections.has(username)) {
                            setTimeout(() => {
                                console.log('üé• –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–≤–æ–Ω–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏–∑ —Å–ø–∏—Å–∫–∞:', username);
                                this.startVideoCall(username);
                            }, Math.random() * 2000 + 500);
                        }
                    });
                }
                
            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', error);
            }
        } else if (data.type === 'webrtc_offer') {
            console.log('üìû –ü–æ–ª—É—á–µ–Ω WebRTC offer –æ—Ç', data.username);
            this.handleWebRTCOffer(data);
        } else if (data.type === 'webrtc_answer') {
            console.log('üìû –ü–æ–ª—É—á–µ–Ω WebRTC answer –æ—Ç', data.username);
            this.handleWebRTCAnswer(data);
        } else if (data.type === 'webrtc_candidate') {
            console.log('üßä –ü–æ–ª—É—á–µ–Ω ICE candidate –æ—Ç', data.username);
            this.handleWebRTCCandidate(data);
        }
    }
    
    sendMessage() {
        if (!this.isConnected || !this.messageInput.value.trim()) return;
        
        const message = {
            type: 'chat',
            content: this.messageInput.value.trim(),
            timestamp: new Date().toISOString()
        };
        
        console.log('üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ:', message);
        this.ws.send(JSON.stringify(message));
        this.messageInput.value = '';
    }
    
    // WebRTC –º–µ—Ç–æ–¥—ã
    
    createPeerConnection(username) {
        console.log('üîó –°–æ–∑–¥–∞–µ–º WebRTC —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å', username);
        const pc = new RTCPeerConnection(this.rtcConfig);
        
        // –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π –ø–æ—Ç–æ–∫ –∫ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—é
        if (this.localStream) {
            this.localStream.getTracks().forEach(track => {
                console.log('‚ûï –î–æ–±–∞–≤–ª—è–µ–º —Ç—Ä–µ–∫:', track.kind, '–¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', username);
                pc.addTrack(track, this.localStream);
            });
        }
        
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ –ø–æ—Ç–æ–∫–∞
        pc.ontrack = (event) => {
            console.log('üé¨ –ü–æ–ª—É—á–µ–Ω —É–¥–∞–ª–µ–Ω–Ω—ã–π –ø–æ—Ç–æ–∫ –æ—Ç', username, '—Ç—Ä–µ–∫–æ–≤:', event.streams[0].getTracks().length);
            this.displayRemoteVideo(username, event.streams[0]);
            this.broadcastingUsers.add(username);
            this.updateUsersList();
        };
        
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ ICE candidates
        pc.onicecandidate = (event) => {
            if (event.candidate) {
                console.log('üßä –û—Ç–ø—Ä–∞–≤–ª—è–µ–º ICE candidate –¥–ª—è', username);
                this.sendWebRTCMessage('webrtc_candidate', username, {
                    candidate: event.candidate
                });
            }
        };
        
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        pc.onconnectionstatechange = () => {
            console.log(`üîÑ WebRTC —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å ${username}:`, pc.connectionState);
            if (pc.connectionState === 'connected') {
                console.log(`‚úÖ –í–∏–¥–µ–æ-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å ${username} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ`);
                this.addSystemMessage(`–í–∏–¥–µ–æ-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å ${username} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ`);
                this.broadcastingUsers.add(username);
                this.updateUsersList();
            } else if (pc.connectionState === 'disconnected' || pc.connectionState === 'failed') {
                console.log(`‚ùå –í–∏–¥–µ–æ-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å ${username} –ø–æ—Ç–µ—Ä—è–Ω–æ`);
                this.addSystemMessage(`–í–∏–¥–µ–æ-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å ${username} –ø–æ—Ç–µ—Ä—è–Ω–æ`);
                this.broadcastingUsers.delete(username);
                this.updateUsersList();
                this.closePeerConnection(username);
            }
        };
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
        this.peerConnections.set(username, pc);
        return pc;
    }
    
    sendWebRTCMessage(type, targetUser, data) {
        if (!this.isConnected) {
            console.warn('‚ö†Ô∏è –ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å WebRTC —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è');
            return;
        }
        
        const message = {
            type: type,
            target_user: targetUser,
            webrtc_data: data,
            timestamp: new Date().toISOString()
        };
        
        console.log('üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º WebRTC —Å–æ–æ–±—â–µ–Ω–∏–µ:', type, '–¥–ª—è', targetUser);
        this.ws.send(JSON.stringify(message));
    }
    
    async handleWebRTCOffer(data) {
        console.log('üìû –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º WebRTC offer –æ—Ç', data.username);
        
        // –°–æ–∑–¥–∞–µ–º peer connection (–¥–∞–∂–µ –µ—Å–ª–∏ —É –Ω–∞—Å –Ω–µ—Ç —Å–≤–æ–µ–≥–æ –≤–∏–¥–µ–æ)
        const pc = this.createPeerConnection(data.username);
        
        try {
            console.log('üîÑ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º remote description...');
            await pc.setRemoteDescription(data.webrtc_data.offer);
            
            console.log('üîÑ –°–æ–∑–¥–∞–µ–º answer...');
            const answer = await pc.createAnswer();
            await pc.setLocalDescription(answer);
            
            this.sendWebRTCMessage('webrtc_answer', data.username, {
                answer: answer
            });
            
            console.log('‚úÖ WebRTC answer –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –¥–ª—è', data.username);
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ offer:', error);
            this.addSystemMessage(`–û—à–∏–±–∫–∞ –≤–∏–¥–µ–æ-–∑–≤–æ–Ω–∫–∞ —Å ${data.username}: ${error.message}`);
        }
    }
    
    async handleWebRTCAnswer(data) {
        console.log('üìû –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º WebRTC answer –æ—Ç', data.username);
        
        const pc = this.peerConnections.get(data.username);
        if (pc) {
            try {
                console.log('üîÑ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º remote description –¥–ª—è answer...');
                await pc.setRemoteDescription(data.webrtc_data.answer);
                console.log('‚úÖ WebRTC answer –æ–±—Ä–∞–±–æ—Ç–∞–Ω —É—Å–ø–µ—à–Ω–æ –¥–ª—è', data.username);
            } catch (error) {
                console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ answer:', error);
                this.addSystemMessage(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç ${data.username}: ${error.message}`);
            }
        } else {
            console.warn('‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω–æ peer connection –¥–ª—è', data.username);
        }
    }
    
    async handleWebRTCCandidate(data) {
        console.log('üßä –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º ICE candidate –æ—Ç', data.username);
        
        const pc = this.peerConnections.get(data.username);
        if (pc && pc.remoteDescription) {
            try {
                await pc.addIceCandidate(data.webrtc_data.candidate);
                console.log('‚úÖ ICE candidate –¥–æ–±–∞–≤–ª–µ–Ω –¥–ª—è', data.username);
            } catch (error) {
                console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ ICE candidate:', error);
            }
        } else {
            if (!pc) {
                console.warn('‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω–æ peer connection –¥–ª—è', data.username);
            } else {
                console.warn('‚ö†Ô∏è Remote description –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –¥–ª—è', data.username);
            }
        }
    }
    
    async startVideoCall(targetUsername) {
        if (targetUsername === this.username) {
            console.log('üö´ –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–∑–≤–æ–Ω–∏—Ç—å —Å–∞–º–æ–º—É —Å–µ–±–µ');
            return;
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
        if (this.peerConnections.has(targetUsername)) {
            console.log('‚ÑπÔ∏è –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å', targetUsername, '—É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
            return;
        }
        
        console.log('üìû –ù–∞—á–∏–Ω–∞–µ–º –≤–∏–¥–µ–æ-–∑–≤–æ–Ω–æ–∫ —Å', targetUsername);
        const pc = this.createPeerConnection(targetUsername);
        
        try {
            console.log('üîÑ –°–æ–∑–¥–∞–µ–º offer...');
            const offer = await pc.createOffer();
            await pc.setLocalDescription(offer);
            
            this.sendWebRTCMessage('webrtc_offer', targetUsername, {
                offer: offer
            });
            
            console.log('‚úÖ WebRTC offer –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –¥–ª—è', targetUsername);
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ offer:', error);
            this.addSystemMessage(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–≤–æ–Ω–∫–µ ${targetUsername}: ${error.message}`);
        }
    }
    
    closePeerConnection(username) {
        const pc = this.peerConnections.get(username);
        if (pc) {
            console.log('üîå –ó–∞–∫—Ä—ã–≤–∞–µ–º peer connection —Å', username);
            pc.close();
            this.peerConnections.delete(username);
            
            // –£–¥–∞–ª—è–µ–º –≤–∏–¥–µ–æ —ç–ª–µ–º–µ–Ω—Ç
            const videoElement = document.getElementById(`video-${username}`);
            if (videoElement) {
                videoElement.remove();
                console.log('üóëÔ∏è –£–¥–∞–ª–µ–Ω –≤–∏–¥–µ–æ —ç–ª–µ–º–µ–Ω—Ç –¥–ª—è', username);
            }
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            this.broadcastingUsers.delete(username);
            this.updateUsersList();
        }
    }
    
    displayRemoteVideo(username, stream) {
        console.log('üé¨ –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —É–¥–∞–ª–µ–Ω–Ω–æ–µ –≤–∏–¥–µ–æ –¥–ª—è', username);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –≤–∏–¥–µ–æ –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        let videoContainer = document.getElementById(`video-${username}`);
        
        if (!videoContainer) {
            // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –≤–∏–¥–µ–æ
            videoContainer = document.createElement('div');
            videoContainer.id = `video-${username}`;
            videoContainer.className = 'video-container';
            
            const video = document.createElement('video');
            video.className = 'video-stream';
            video.autoplay = true;
            video.playsinline = true;
            
            const label = document.createElement('div');
            label.className = 'video-label';
            label.textContent = username;
            
            videoContainer.appendChild(video);
            videoContainer.appendChild(label);
            
            // –î–æ–±–∞–≤–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
            this.createVideoControls(videoContainer, username);
            
            this.videoArea.appendChild(videoContainer);
            
            // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤–∏–¥–µ–æ
            this.setupVideoControls();
            
            console.log('‚úÖ –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –≤–∏–¥–µ–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è', username);
        }
        
        const video = videoContainer.querySelector('video');
        video.srcObject = stream;
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤–∏–¥–µ–æ –æ–±–ª–∞—Å—Ç—å, –µ—Å–ª–∏ —Å–∫—Ä—ã—Ç–∞
        this.videoArea.classList.add('active');
        console.log('‚úÖ –í–∏–¥–µ–æ –ø–æ—Ç–æ–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –¥–ª—è', username);
    }
    
    setupVideoControls() {
        // –ö–Ω–æ–ø–∫–∞ –ø–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞
        if (!document.querySelector('.fullscreen-toggle')) {
            const fullscreenBtn = document.createElement('button');
            fullscreenBtn.className = 'fullscreen-toggle';
            fullscreenBtn.textContent = '‚õ∂ –ü–æ–ª–Ω—ã–π —ç–∫—Ä–∞–Ω';
            fullscreenBtn.addEventListener('click', () => this.toggleFullscreen());
            this.videoArea.appendChild(fullscreenBtn);
        }
        
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ ESC –¥–ª—è –≤—ã—Ö–æ–¥–∞ –∏–∑ –ø–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞
        document.addEventListener('keydown', (e) => {
            if (e.key === 'Escape' && this.videoArea.classList.contains('fullscreen')) {
                this.toggleFullscreen();
            }
        });
    }
    
    toggleFullscreen() {
        const isFullscreen = this.videoArea.classList.contains('fullscreen');
        
        if (isFullscreen) {
            this.videoArea.classList.remove('fullscreen');
            const btn = this.videoArea.querySelector('.fullscreen-toggle');
            if (btn) btn.textContent = '‚õ∂ –ü–æ–ª–Ω—ã–π —ç–∫—Ä–∞–Ω';
            console.log('üì∫ –í—ã—Ö–æ–¥ –∏–∑ –ø–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞');
        } else {
            this.videoArea.classList.add('fullscreen');
            const btn = this.videoArea.querySelector('.fullscreen-toggle');
            if (btn) btn.textContent = '‚úï –í—ã–π—Ç–∏';
            console.log('üì∫ –ü–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω—ã–π —Ä–µ–∂–∏–º –≤–∫–ª—é—á–µ–Ω');
        }
    }
    
    createVideoControls(videoContainer, username) {
        const controlsOverlay = document.createElement('div');
        controlsOverlay.className = 'video-controls-overlay';
        
        // –ö–Ω–æ–ø–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞
        const resizeBtn = document.createElement('button');
        resizeBtn.className = 'video-control-btn';
        resizeBtn.innerHTML = '‚õ∂';
        resizeBtn.title = '–£–≤–µ–ª–∏—á–∏—Ç—å/—É–º–µ–Ω—å—à–∏—Ç—å';
        resizeBtn.addEventListener('click', (e) => {
            e.stopPropagation();
            this.toggleVideoSize(videoContainer);
        });
        
        // –ö–Ω–æ–ø–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–µ–∂–∏–º–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        const fitBtn = document.createElement('button');
        fitBtn.className = 'video-control-btn';
        fitBtn.innerHTML = '‚öè';
        fitBtn.title = '–†–µ–∂–∏–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è';
        fitBtn.addEventListener('click', (e) => {
            e.stopPropagation();
            this.toggleVideoFit(videoContainer);
        });
        
        controlsOverlay.appendChild(resizeBtn);
        controlsOverlay.appendChild(fitBtn);
        videoContainer.appendChild(controlsOverlay);
        
        // –î–≤–æ–π–Ω–æ–π –∫–ª–∏–∫ –¥–ª—è –º–∞–∫—Å–∏–º–∏–∑–∞—Ü–∏–∏
        videoContainer.addEventListener('dblclick', () => {
            this.toggleVideoSize(videoContainer);
        });
    }
    
    toggleVideoSize(videoContainer) {
        const isMaximized = videoContainer.classList.contains('maximized');
        
        // –°–Ω–∞—á–∞–ª–∞ —É–±–∏—Ä–∞–µ–º –º–∞–∫—Å–∏–º–∏–∑–∞—Ü–∏—é —É –≤—Å–µ—Ö –≤–∏–¥–µ–æ
        this.videoArea.querySelectorAll('.video-container').forEach(container => {
            container.classList.remove('maximized');
        });
        
        // –ó–∞—Ç–µ–º –º–∞–∫—Å–∏–º–∏–∑–∏—Ä—É–µ–º —Ç–µ–∫—É—â–µ–µ, –µ—Å–ª–∏ –æ–Ω–æ –Ω–µ –±—ã–ª–æ –º–∞–∫—Å–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–æ
        if (!isMaximized) {
            videoContainer.classList.add('maximized');
            console.log('üì∫ –í–∏–¥–µ–æ –º–∞–∫—Å–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–æ');
        } else {
            console.log('üì∫ –í–∏–¥–µ–æ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–æ –∫ –æ–±—ã—á–Ω–æ–º—É —Ä–∞–∑–º–µ—Ä—É');
        }
    }
    
    toggleVideoFit(videoContainer) {
        const video = videoContainer.querySelector('video');
        const isContain = video.classList.contains('contain');
        
        if (isContain) {
            video.classList.remove('contain');
            console.log('üì∫ –†–µ–∂–∏–º: –∑–∞–ø–æ–ª–Ω–∏—Ç—å —ç–∫—Ä–∞–Ω');
        } else {
            video.classList.add('contain');
            console.log('üì∫ –†–µ–∂–∏–º: –ø–æ–∫–∞–∑–∞—Ç—å –ø–æ–ª–Ω–æ—Å—Ç—å—é');
        }
    }
    
    displayMessage(message) {
        const messageEl = document.createElement('div');
        messageEl.className = `message ${message.username === this.username ? 'own' : ''}`;
        
        const time = new Date(message.timestamp).toLocaleTimeString('ru-RU', {
            hour: '2-digit',
            minute: '2-digit'
        });
        
        messageEl.innerHTML = `
            <div class="message-bubble">
                <div class="message-header">
                    <span>${message.username}</span>
                    <span>${time}</span>
                </div>
                <div class="message-content">${this.escapeHtml(message.content)}</div>
            </div>
        `;
        
        this.messagesContainer.appendChild(messageEl);
        this.messagesContainer.scrollTop = this.messagesContainer.scrollHeight;
    }
    
    addSystemMessage(text) {
        const messageEl = document.createElement('div');
        messageEl.className = 'system-message';
        messageEl.textContent = text;
        
        this.messagesContainer.appendChild(messageEl);
        this.messagesContainer.scrollTop = this.messagesContainer.scrollHeight;
    }
    
    addUser(username) {
        this.onlineUsers.add(username);
        this.updateUsersList();
    }
    
    removeUser(username) {
        this.onlineUsers.delete(username);
        this.broadcastingUsers.delete(username);
        this.updateUsersList();
    }
    
    updateUsersList() {
        this.usersCount.textContent = this.onlineUsers.size;
        this.usersContainer.innerHTML = '';
        
        Array.from(this.onlineUsers).sort().forEach(username => {
            const userEl = document.createElement('div');
            userEl.className = 'user-item';
            
            // –î–æ–±–∞–≤–ª—è–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∫–ª–∏–∫–Ω—É—Ç—å –Ω–∞ –¥—Ä—É–≥–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –≤–∏–¥–µ–æ-–∑–≤–æ–Ω–∫–∞
            if (username !== this.username && this.localStream) {
                userEl.classList.add('clickable');
                userEl.title = '–ù–∞–∂–º–∏—Ç–µ –¥–ª—è –≤–∏–¥–µ–æ-–∑–≤–æ–Ω–∫–∞';
                userEl.addEventListener('click', () => {
                    console.log('üëÜ –ö–ª–∏–∫ –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é', username);
                    this.startVideoCall(username);
                });
            }
            
            const initial = username.charAt(0).toUpperCase();
            const isBroadcasting = this.broadcastingUsers.has(username);
            const statusClass = isBroadcasting ? 'broadcasting' : '';
            
            userEl.innerHTML = `
                <div class="user-avatar">${initial}</div>
                <span>${username}</span>
                <div class="user-status ${statusClass}"></div>
            `;
            
            this.usersContainer.appendChild(userEl);
        });
    }
    
    async toggleVideo() {
        if (!this.localStream) {
            await this.startVideo();
        } else {
            this.stopVideo();
        }
    }
    
    async startVideo() {
        try {
            console.log('üé• –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–æ—Å—Ç—É–ø –∫ —ç–∫—Ä–∞–Ω—É –∏ –º–∏–∫—Ä–æ—Ñ–æ–Ω—É...');
            
            // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å–∫—Ä–∏–Ω—à–µ—Ä–∏–Ω–≥
            const screenStream = await navigator.mediaDevices.getDisplayMedia({
                video: {
                    mediaSource: 'screen',
                    width: { ideal: 1920, max: 1920 },
                    height: { ideal: 1080, max: 1080 },
                    frameRate: { ideal: 30, max: 60 }
                },
                audio: {
                    echoCancellation: true,
                    noiseSuppression: true,
                    sampleRate: 44100
                }
            });
            
            console.log('‚úÖ –ü–æ–ª—É—á–µ–Ω –ø–æ—Ç–æ–∫ —ç–∫—Ä–∞–Ω–∞:', screenStream.getTracks().map(t => t.kind));
            
            // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –º–∏–∫—Ä–æ—Ñ–æ–Ω –æ—Ç–¥–µ–ª—å–Ω–æ
            const micStream = await navigator.mediaDevices.getUserMedia({
                audio: {
                    echoCancellation: true,
                    noiseSuppression: true,
                    autoGainControl: true
                },
                video: false
            });
            
            console.log('‚úÖ –ü–æ–ª—É—á–µ–Ω –ø–æ—Ç–æ–∫ –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞:', micStream.getTracks().map(t => t.kind));
            
            // –û–±—ä–µ–¥–∏–Ω—è–µ–º –ø–æ—Ç–æ–∫–∏
            this.localStream = new MediaStream([
                ...screenStream.getVideoTracks(),
                ...micStream.getAudioTracks()
            ]);
            
            console.log('‚úÖ –û–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–π –ø–æ—Ç–æ–∫ —Å–æ–∑–¥–∞–Ω:', this.localStream.getTracks().map(t => t.kind));
            
            this.localVideo.srcObject = this.localStream;
            this.videoArea.classList.add('active');
            this.videoToggle.classList.add('active');
            this.videoToggle.textContent = 'üñ•Ô∏è –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —ç–∫—Ä–∞–Ω';
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            this.broadcastingUsers.add(this.username);
            this.updateUsersList();
            
            // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–∫—Ä–∏–Ω—à–µ—Ä–∏–Ω–≥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
            screenStream.getVideoTracks()[0].onended = () => {
                console.log('üõë –°–∫—Ä–∏–Ω—à–µ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º');
                this.addSystemMessage('–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —ç–∫—Ä–∞–Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
                this.stopVideo();
            };
            
            this.addSystemMessage('–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —ç–∫—Ä–∞–Ω–∞ –≤–∫–ª—é—á–µ–Ω–∞. –ö–ª–∏–∫–Ω–∏—Ç–µ –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∑–≤–æ–Ω–∫–∞.');
            
            // –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤–ª—è–µ–º —Ç—Ä–µ–∫–∏ –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
            this.addTracksToExistingConnections();

            // –ó–∞—Ç–µ–º –∑–≤–æ–Ω–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º, —Å –∫–æ—Ç–æ—Ä—ã–º–∏ –Ω–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
            setTimeout(() => {
                this.onlineUsers.forEach(username => {
                    if (username !== this.username && !this.peerConnections.has(username)) {
                        console.log('üé• –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∑–≤–æ–Ω–æ–∫ –Ω–æ–≤–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é:', username);
                        this.startVideoCall(username);
                    }
                });
            }, 1000); // –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ renegotiation
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ —ç–∫—Ä–∞–Ω—É/–º–∏–∫—Ä–æ—Ñ–æ–Ω—É:', error);
            
            let errorMessage = '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø: ';
            
            if (error.name === 'NotAllowedError') {
                errorMessage += '–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω. –†–∞–∑—Ä–µ—à–∏—Ç–µ –¥–æ—Å—Ç—É–ø –∫ —ç–∫—Ä–∞–Ω—É –∏ –º–∏–∫—Ä–æ—Ñ–æ–Ω—É.';
            } else if (error.name === 'NotFoundError') {
                errorMessage += '–£—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.';
            } else if (error.name === 'NotSupportedError') {
                errorMessage += '–ë—Ä–∞—É–∑–µ—Ä –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é.';
            } else {
                errorMessage += error.message;
            }
            
            alert(errorMessage);
            this.addSystemMessage(errorMessage);
        }
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Ç—Ä–µ–∫–∏ –≤–æ –≤—Å–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    addTracksToExistingConnections() {
        if (!this.localStream) return;
        
        console.log('üîÑ –î–æ–±–∞–≤–ª—è–µ–º —Ç—Ä–µ–∫–∏ –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è...');
        
        this.peerConnections.forEach((pc, username) => {
            console.log('‚ûï –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ —Ç—Ä–µ–∫–∏ –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å', username);
            
            // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ senders (–µ—Å–ª–∏ –µ—Å—Ç—å)
            const senders = pc.getSenders();
            senders.forEach(sender => {
                if (sender.track) {
                    console.log('üóëÔ∏è –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π sender:', sender.track.kind);
                    pc.removeTrack(sender);
                }
            });
            
            // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ —Ç—Ä–µ–∫–∏
            this.localStream.getTracks().forEach(track => {
                console.log('‚úÖ –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π —Ç—Ä–µ–∫:', track.kind, '–¥–ª—è', username);
                pc.addTrack(track, this.localStream);
            });
            
            // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π offer –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç—Ä–µ–∫–æ–≤
            this.renegotiateConnection(username, pc);
        });
    }
    
    // –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –Ω–æ–≤—ã–º–∏ —Ç—Ä–µ–∫–∞–º–∏
    async renegotiateConnection(username, pc) {
        try {
            console.log('üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å', username);
            const offer = await pc.createOffer();
            await pc.setLocalDescription(offer);
            
            this.sendWebRTCMessage('webrtc_offer', username, {
                offer: offer
            });
            
            console.log('‚úÖ Renegotiation offer –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –¥–ª—è', username);
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å', username, ':', error);
        }
    }
    
    stopVideo() {
        console.log('üõë –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤–∏–¥–µ–æ...');
        
        if (this.localStream) {
            this.localStream.getTracks().forEach(track => {
                console.log('üõë –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç—Ä–µ–∫:', track.kind);
                track.stop();
            });
            this.localStream = null;
        }
        
        this.localVideo.srcObject = null;
        this.videoArea.classList.remove('active');
        this.videoToggle.classList.remove('active');
        this.videoToggle.textContent = 'üñ•Ô∏è –≠–∫—Ä–∞–Ω';
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        this.broadcastingUsers.delete(this.username);
        this.updateUsersList();
        
        // –ó–∞–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ WebRTC —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        this.peerConnections.forEach((pc, username) => {
            console.log('üîå –ó–∞–∫—Ä—ã–≤–∞–µ–º WebRTC —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å', username);
            pc.close();
        });
        this.peerConnections.clear();
        
        // –£–¥–∞–ª—è–µ–º –≤—Å–µ —É–¥–∞–ª–µ–Ω–Ω—ã–µ –≤–∏–¥–µ–æ
        const remoteVideos = this.videoArea.querySelectorAll('[id^="video-"]:not([id="localVideo"])');
        remoteVideos.forEach(video => {
            console.log('üóëÔ∏è –£–¥–∞–ª—è–µ–º —É–¥–∞–ª–µ–Ω–Ω–æ–µ –≤–∏–¥–µ–æ:', video.id);
            video.remove();
        });
        
        this.addSystemMessage('–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —ç–∫—Ä–∞–Ω–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞');
    }
    
    toggleAudio() {
        if (this.localStream) {
            const audioTrack = this.localStream.getAudioTracks()[0];
            if (audioTrack) {
                audioTrack.enabled = !audioTrack.enabled;
                this.audioToggle.classList.toggle('active', audioTrack.enabled);
                this.audioToggle.textContent = audioTrack.enabled ? 'üé§ –í—ã–∫–ª—é—á–∏—Ç—å –º–∏–∫—Ä–æ—Ñ–æ–Ω' : 'üé§ –í–∫–ª—é—á–∏—Ç—å –º–∏–∫—Ä–æ—Ñ–æ–Ω';
                console.log('üé§ –ê—É–¥–∏–æ:', audioTrack.enabled ? '–≤–∫–ª—é—á–µ–Ω–æ' : '–≤—ã–∫–ª—é—á–µ–Ω–æ');
            }
        }
    }
    
    escapeHtml(text) {
        const div = document.createElement('div');
        div.textContent = text;
        return div.innerHTML;
    }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —á–∞—Ç –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener('DOMContentLoaded', () => {
    console.log('üöÄ –ó–∞–ø—É—Å–∫ Thoth Chat Client');
    new ThothChatClient();
});